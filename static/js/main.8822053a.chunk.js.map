{"version":3,"sources":["CroppableImage.js","FileUploader.js","App.js","serviceWorker.js","index.js"],"names":["CroppableImage","props","image","crop","setCrop","React","createElement","ReactCrop","src","onChange","newCrop","imageStyle","width","height","maxHeight","maxWidth","FileUploader","_React$useState","useState","_React$useState2","_slicedToArray","error","setError","Fragment","type","className","event","file","fileList","target","files","indexOf","size","clearImage","reader","FileReader","onload","e","handleUploadImage","result","readAsDataURL","accept","onClick","style","color","initialCrop","x","y","App","setImage","_React$useState3","_React$useState4","_React$useState5","_React$useState6","previewImage","setPreviewImage","document","getElementsByClassName","value","printWindow","window","open","img","body","appendChild","print","onafterprint","close","fullImage","getElementsByTagName","ratioX","naturalWidth","ratioY","naturalHeight","canvas","getContext","drawImage","toDataURL","Promise","resolve","then","imgSrc","id","alt","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8822053a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\n\r\nexport default function CroppableImage(props) {\r\n  const { image, crop, setCrop } = props;\r\n  return (\r\n    image && (\r\n      <ReactCrop\r\n        src={image}\r\n        crop={crop}\r\n        onChange={newCrop => setCrop(newCrop)}\r\n        imageStyle={{ width: \"1000px\", height: \"700px\" }}\r\n        maxHeight=\"100\"\r\n        maxWidth=\"800\"\r\n      />\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\nexport default function FileUploader(props) {\r\n  const [error, setError] = React.useState(\"\");\r\n  function handleFileUpload(event) {\r\n    const fileList = event.target.files;\r\n    if (fileList && fileList[0]) {\r\n      const isError = validateFile(fileList[0]);\r\n      if (!isError) {\r\n        const reader = new FileReader();\r\n        reader.onload = function(e) {\r\n          props.handleUploadImage(e.target.result);\r\n        };\r\n        reader.readAsDataURL(event.target.files[0]);\r\n      } else {\r\n        props.clearImage();\r\n        setError(\"Please input an image with size <= 1MB\");\r\n      }\r\n    }\r\n  }\r\n  function validateFile(file) {\r\n    if (file.type.indexOf(\"image/\") === -1 || file.size > 1000000) return true;\r\n    else return false;\r\n  }\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"file\"\r\n        className=\"input-element\"\r\n        onChange={handleFileUpload}\r\n        accept=\"image/*\"\r\n      />\r\n      <button className=\"clearFile\" onClick={props.clearImage}>\r\n        X\r\n      </button>\r\n      <div style={{ color: \"red\" }}>{error}</div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CroppableImage from \"./CroppableImage\";\r\nimport FileUploader from \"./FileUploader\";\r\nimport \"./App.css\";\r\n\r\nconst initialCrop = {\r\n  width: 100,\r\n  height: 100,\r\n  x: 20,\r\n  y: 20\r\n};\r\nfunction App() {\r\n  const [image, setImage] = React.useState(\"\");\r\n  const [crop, setCrop] = React.useState(initialCrop);\r\n  const [previewImage, setPreviewImage] = React.useState(\"\");\r\n\r\n  function handleSaveImage() {\r\n    const fullImage = document.getElementsByTagName(\"img\")[0];\r\n    let croppedImage;\r\n    if (fullImage) {\r\n      const ratioX = fullImage.naturalWidth / image.width;\r\n      const ratioY = fullImage.naturalHeight / image.height;\r\n      const canvas = document.createElement(\"canvas\");\r\n      const canvasContext = canvas.getContext(\"2d\");\r\n      canvasContext.drawImage(\r\n        fullImage,\r\n        crop.x * ratioX,\r\n        crop.y * ratioY,\r\n        crop.width * ratioX,\r\n        crop.height * ratioY,\r\n        0,\r\n        0,\r\n        crop.width,\r\n        crop.height\r\n      );\r\n      croppedImage = canvas.toDataURL(\"image/png\");\r\n    }\r\n    saveImageToAPI(croppedImage).then(imgSrc => setPreviewImage(imgSrc));\r\n  }\r\n\r\n  function saveImageToAPI(imageFile) {\r\n    return Promise.resolve(\"http://lorempixel.com/800/100/cats/\");\r\n  }\r\n  function handlePrint() {\r\n    const printWindow = window.open(\"\", \"_blank\");\r\n    const img = printWindow.document.createElement(\"img\");\r\n    img.src = previewImage;\r\n    printWindow.document.body.style = \"text-align: center\";\r\n    printWindow.document.body.appendChild(img);\r\n    img.onload = function() {\r\n      printWindow.print();\r\n    };\r\n    printWindow.onafterprint = function() {\r\n      printWindow.close();\r\n    };\r\n  }\r\n  function handleUploadImage(image) {\r\n    setPreviewImage(\"\");\r\n    setImage(image);\r\n    setCrop(initialCrop);\r\n  }\r\n  function clearImage() {\r\n    setImage(\"\");\r\n    setPreviewImage(\"\");\r\n    clearFile();\r\n  }\r\n  function clearFile() {\r\n    document.getElementsByClassName(\"input-element\")[0].value = \"\";\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <h3>Welcome to Image Editor</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td>\r\n              {!previewImage ? (\r\n                <button className=\"saveBtn\" onClick={handleSaveImage}>\r\n                  Save Image\r\n                </button>\r\n              ) : (\r\n                <button className=\"printBtn\" onClick={handlePrint}>\r\n                  Print Preview\r\n                </button>\r\n              )}\r\n              <button className=\"clearBtn\" onClick={clearImage}>\r\n                Clear Image\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr className=\"imageSection\">\r\n            <td>\r\n              {\" \"}\r\n              {previewImage ? (\r\n                <img id=\"previewImage\" src={previewImage} alt=\"abc\" />\r\n              ) : (\r\n                <CroppableImage image={image} crop={crop} setCrop={setCrop} />\r\n              )}\r\n            </td>\r\n          </tr>\r\n          <tr className=\"fileSection\">\r\n            <td>\r\n              <FileUploader\r\n                handleUploadImage={handleUploadImage}\r\n                clearImage={clearImage}\r\n              />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}